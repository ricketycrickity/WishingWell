#!/usr/bin/env python
import pymongo
import time
import pika

# method to receive statements generated by RabbitMQ
def callback(ch, method, properties, body):
    print("%r:%r" % (method.routing_key, body))


# start instance of Mongo Client and RabbitMQ Channel
db = pymongo.MongoClient().test
channel = pika.BlockingConnection(pika.ConnectionParameters('localhost')).channel()

# event loop for sending commands
while 1:
    # First recieve input from keyboard
    message = input("Type message command:")
    print("[Checkpoint 01", time.time(), "] Message Captured:", message)
    # construct msg ID for each message received
    MsgID = "team_19$" + str(time.time())

    # Parsing message to MongoDB format
    if message[0:2:] == 'p:':
        #produce
        action = 'p'
        exchange = message[message.find(':')+1:message.find('+'):]
        queue = message[message.find('+')+1:message.find('"')-1:]
        cmdMess = message[message.find('"')+1:message.rfind('""'):]
        #construct command in db format
        command = {
                    "Action": action,
                    "Place": exchange,
                    "MsgID": MsgID,
                    "Subject": queue,
                    "Message": cmdMess
                  }

    elif message[0:2:] == 'c:':
        #consume
        action = 'c'
        exchange = message[message.find(':')+1:message.find('+'):]
        queue = message[message.find('+')+1::]
        command = {
                    "Action": action,
                    "Place": exchange,
                    "MsgID": MsgID,
                    "Subject": queue,
                  }

    else:
        print("No command recieved")
        continue

    print("[Checkpoint 02 ", time.time(), "] Store command in MongoDB instance:", command)
    db.commands.insert_one(command)

    # send command to rabbit MQ and receive result/response
